#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
recognizer.py is a wrapper for pocketsphinx.
  parameters:
    ~lm - filename of language model
    ~dict - filename of dictionary
    ~mic_name - set the pulsesrc device name for the microphone input.
                e.g. a Logitech G35 Headset has the following device name: alsa_input.usb-Logitech_Logitech_G35_Headset-00-Headset_1.analog-mono
                To list audio device info on your machine, in a terminal type: pacmd list-sources
  publications:
    ~output (std_msgs/String) - text output
  services:
    ~start (std_srvs/Empty) - start speech recognition
    ~stop (std_srvs/Empty) - stop speech recognition
"""

import roslib; roslib.load_manifest('pocketsphinx')
import rospy

import pygtk
pygtk.require('2.0')
import gtk

import gobject
import pygst
pygst.require('0.10')
gobject.threads_init()
import gst

from std_msgs.msg import String
from std_srvs.srv import *
import os
import commands

class recognizer(object):
    """ GStreamer based speech recognizer. """

    def __init__(self):
        # Start node
        rospy.init_node("recognizer_cn")

        self._device_name_param = "~mic_name"  # Find the name of your microphone by typing pacmd list-sources in the terminal

        # Configure mics with gstreamer launch config
        if rospy.has_param(self._device_name_param):
            self.device_name = rospy.get_param(self._device_name_param)
            self.device_index = self.pulse_index_from_name(self.device_name)
            self.launch_config = "pulsesrc device=" + str(self.device_index)
            rospy.loginfo("Using: pulsesrc device=%s name=%s", self.device_index, self.device_name)
        else:
            self.launch_config = 'gconfaudiosrc'
#            self.launch_config = 'filesrc location= /home/ppeix/music.wav ! wavparse '

        rospy.loginfo("Launch config: %s", self.launch_config)
#                            + "! tee name=t " \
#                           + "! queue " \
        self.launch_config += " ! audioconvert ! audioresample " \
                            + "! vader name=vad auto-threshold=true " \
                            + "! filesink location=/home/ppeix/music.wav "
#                            + "! queue " \
#                            + "! wavenc " \
        rospy.loginfo("Launch config: %s", self.launch_config)

        self.launch_config_split="filesrc location=/home/ppeix/music.wav ! wavparse ! gdppay ! multifilesink next-file=4 max-file-size=1000000 location=/home/ppeix/foo%05d.buff"

        # Configure ROS settings
        self.started = False
        
        self.start_recognizer()
#        self.start_split()
    def start_split(self):
        rospy.loginfo("Starting spliting... ")

        self.pipeline_split = gst.parse_launch(self.launch_config_split)
        self.pipeline_split.set_state(gst.STATE_PLAYING)
    def start_recognizer(self):
        rospy.loginfo("Starting recognizer... ")

        self.pipeline = gst.parse_launch(self.launch_config)
        self.pipeline.set_state(gst.STATE_PLAYING)
        self.started = True

if __name__ == "__main__":
    start = recognizer()
    gtk.main()

#!/usr/bin/python 
# First write the buffer stream to .buff files (annotated using GStreamer's GDP format)
#gst-launch-0.10  -e filesrc location=/home/ppeix/music.wav ! wavparse ! gdppay ! multifilesink next-file=4 max-file-size=1000000 location=/home/ppeix/foo%05d.buff
# use the following instead for any other source (e.g. internet radio streams)
#gst-launch -e uridecodebin uri=http://url.to/stream ! gdppay ! multifilesink next-file=4 max-file-size=1000000 location=foo%05d.buff

# After we're done, convert each of the resulting files to proper .wav files with headers
#for file in *.buff; do
#    tgtFile="$(echo "$file"|sed 's/.buff$/.wav/')"
    
#        gst-launch-0.10 filesrc "location=$file" ! gdpdepay ! wavenc ! filesink "location=$tgtFile"
#    done
    
    # Uncomment the following line to remove the .buff files here, but to avoid accidentally 
    # deleting stuff we haven't properly converted if something went wrong, I'm not gonna do that now.
    #rm *.buff''"""""''"")"'')
